// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          Int          @id @default(autoincrement()) // internal PK
  clerkId     String?      @unique // Clerk userId, nullable if deleted
  email       String       @unique
  isAdmin     Boolean      @default(false) @map("is_admin")
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @default(now()) @updatedAt @map("updated_at")
  deletedAt   DateTime?    @map("deleted_at")
  restaurants Restaurant[] @relation("RestaurantOwners")
}

model Restaurant {
  id                          Int       @id @default(autoincrement())
  slug                        String    @unique
  name                        String
  logoUrl                     String?   @map("logo_url")
  emailContact                String    @map("email_contact")
  phoneContact                String?   @map("phone_contact")
  openingHours                Json      @map("opening_hours")
  slotInterval                Int       @map("slot_interval")
  minGuestsPerReservation     Int       @map("min_guests_per_reservation")
  maxGuestsPerReservation     Int       @map("max_guests_per_reservation")
  maxReservationsPerSlot      Int       @map("max_reservations_per_slot")
  reservationLeadTimeMinHours Int       @map("reservation_lead_time_min_hours")
  reservationLeadTimeMaxHours Int       @map("reservation_lead_time_max_hours")
  subscriptionStatus          String    @map("subscription_status")
  createdAt                   DateTime  @default(now()) @map("created_at")
  updatedAt                   DateTime  @updatedAt @map("updated_at")
  deletedAt                   DateTime? @map("deleted_at")

  owners       User[]        @relation("RestaurantOwners")
  reservations Reservation[]

  @@map("restaurants")
}

enum ReservationStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model Reservation {
  id            Int               @id @default(autoincrement())
  restaurantId  Int               @map("restaurant_id")
  firstName     String            @map("first_name")
  lastName      String            @map("last_name")
  email         String
  phone         String
  date          DateTime
  guests        Int
  notes         String?
  depositAmount Decimal?          @map("deposit_amount") @db.Decimal(10, 2)
  status        ReservationStatus @default(PENDING)
  cancelToken   String?           @unique @map("cancel_token") // secure token for email cancellation links
  cancelledAt   DateTime?         @map("cancelled_at")
  createdAt     DateTime          @default(now()) @map("created_at")
  updatedAt     DateTime          @updatedAt @map("updated_at")

  restaurant Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@map("reservations")
}
